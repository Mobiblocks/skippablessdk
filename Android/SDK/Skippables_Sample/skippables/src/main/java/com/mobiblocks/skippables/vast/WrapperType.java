//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.12.14 at 03:40:33 PM EET 
//


package com.mobiblocks.skippables.vast;

import android.support.annotation.NonNull;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for Wrapper_type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Wrapper_type">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.iab.com/VAST}AdDefinitionBase_type">
 *       &lt;sequence>
 *         &lt;element name="AdVerifications" type="{http://www.iab.com/VAST}AdVerifications_Wrapper_type" minOccurs="0"/>
 *         &lt;element name="Creatives" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="Creative" type="{http://www.iab.com/VAST}Creative_WrapperChild_type" maxOccurs="unbounded"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="VASTAdTagURI" type="{http://www.w3.org/2001/XMLSchema}anyURI"/>
 *       &lt;/sequence>
 *       &lt;attribute name="followAdditionalWrappers" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="allowMultipleAds" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="fallbackOnNoAd" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
public class WrapperType
    extends AdDefinitionBaseType
{

    protected AdVerificationsWrapperType adVerifications;
    protected WrapperType.Creatives creatives;
    @NonNull
    protected URL vastAdTagURI;
    protected Boolean followAdditionalWrappers;
    protected Boolean allowMultipleAds;
    protected Boolean fallbackOnNoAd;
    
    protected VAST wrappedVast;

    /**
     * Gets the value of the adVerifications property.
     * 
     * @return
     *     possible object is
     *     {@link AdVerificationsWrapperType }
     *     
     */
    public AdVerificationsWrapperType getAdVerifications() {
        return adVerifications;
    }

    /**
     * Sets the value of the adVerifications property.
     * 
     * @param value
     *     allowed object is
     *     {@link AdVerificationsWrapperType }
     *     
     */
    public void setAdVerifications(AdVerificationsWrapperType value) {
        this.adVerifications = value;
    }

    /**
     * Gets the value of the creatives property.
     * 
     * @return
     *     possible object is
     *     {@link WrapperType.Creatives }
     *     
     */
    public WrapperType.Creatives getCreatives() {
        return creatives;
    }

    /**
     * Sets the value of the creatives property.
     * 
     * @param value
     *     allowed object is
     *     {@link WrapperType.Creatives }
     *     
     */
    public void setCreatives(WrapperType.Creatives value) {
        this.creatives = value;
    }

    /**
     * Gets the value of the vastAdTagURI property.
     * 
     * @return
     *     possible object is
     *     {@link URL }
     *     
     */
    public URL getVASTAdTagURI() {
        return vastAdTagURI;
    }

    /**
     * Sets the value of the vastAdTagURI property.
     * 
     * @param value
     *     allowed object is
     *     {@link URL }
     *     
     */
    public void setVASTAdTagURI(URL value) {
        this.vastAdTagURI = value;
    }

    /**
     * Gets the value of the followAdditionalWrappers property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isFollowAdditionalWrappers() {
        return followAdditionalWrappers;
    }

    /**
     * Sets the value of the followAdditionalWrappers property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setFollowAdditionalWrappers(Boolean value) {
        this.followAdditionalWrappers = value;
    }

    /**
     * Gets the value of the allowMultipleAds property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isAllowMultipleAds() {
        return allowMultipleAds;
    }

    /**
     * Sets the value of the allowMultipleAds property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAllowMultipleAds(Boolean value) {
        this.allowMultipleAds = value;
    }

    /**
     * Gets the value of the fallbackOnNoAd property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isFallbackOnNoAd() {
        return fallbackOnNoAd;
    }

    /**
     * Sets the value of the fallbackOnNoAd property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setFallbackOnNoAd(Boolean value) {
        this.fallbackOnNoAd = value;
    }

    public VAST getWrappedVast() {
        return wrappedVast;
    }

    public void setWrappedVast(VAST wrappedVast) {
        this.wrappedVast = wrappedVast;
    }

    public LinearWrapperChildType getFirstLinearCreative() {
        if (creatives == null) {
            return null;
        }

        List<CreativeWrapperChildType> creative = creatives.getCreative();
        if (creative.size() == 0) {
            return null;
        }

        for (CreativeWrapperChildType wrapper : creative) {
            LinearWrapperChildType linear = wrapper.getLinear();
            if (linear != null) {
                return linear;
            }
        }
        
        return null;
    }

    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="Creative" type="{http://www.iab.com/VAST}Creative_WrapperChild_type" maxOccurs="unbounded"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    public static class Creatives {

        @NonNull
        protected List<CreativeWrapperChildType> creative = new ArrayList<>();

        /**
         * Gets the value of the creative property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the creative property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getCreative().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link CreativeWrapperChildType }
         * 
         * 
         */
        @NonNull
        public List<CreativeWrapperChildType> getCreative() {
            return this.creative;
        }
        
        public void addCreative(@NonNull CreativeWrapperChildType creative) {
            this.creative.add(creative);
        }

    }

}
